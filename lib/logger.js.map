{"version":3,"sources":["logger.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;mBAegB,KAAK;;;;kBACN,IAAI;;;;2BACK,eAAe;;;;8BAChB,iBAAiB;;;;AACjC,IAAI,GAAG,GAAG,IAAI,CAAC;;QAAX,GAAG,GAAH,GAAG;AAEP,IAAI,MAAM,GAAG;AAChB,SAAK,EAAE,eAAC,KAAK,EAAK;AACd,YAAI,GAAG,YAAY,MAAM,EAAE;AACvB,eAAG,CAAC,KAAK,GAAG,KAAK,CAAC;SACrB;KACJ;AACD,SAAK,EAAE,eAAC,KAAK,EAAK;AACd,YAAI,GAAG,YAAY,MAAM,EAAE;AACvB,eAAG,CAAC,KAAK,GAAG,KAAK,CAAC;SACrB;KACJ;AACD,QAAI,EAAE,cAAC,KAAK,EAAK;AACb,YAAI,GAAG,YAAY,MAAM,EAAE;AACvB,eAAG,CAAC,IAAI,GAAG,KAAK,CAAC;SACpB;KACJ;CACJ,CAAC;;QAhBS,MAAM,GAAN,MAAM;;IAkBI,MAAM;AACZ,aADM,MAAM,GACT;8BADG,MAAM;KAEtB;;iBAFgB,MAAM;;eAInB,cAAC,QAAQ,EAAE,OAAO,EAAE;AACpB,gBAAI,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE;AACpD,uBAAO,IAAI,KAAK,qBAAmB,QAAQ,iBAAc,CAAC;aAC7D;;AAED,gBAAI,CAAC,IAAI,GAAG,4BAAW,MAAM,CAAC;AAC1B,qBAAK,EAAC,sCAAsC;aAC/C,CAAC,CAAC;AACH,oBAhCG,GAAG,GAgCN,GAAG,GAAG,IAAI,CAAC;SACd;;;aAEQ,UAAC,KAAK,EAAE;AACb,gBAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC1B;;;aAEQ,UAAC,KAAK,EAAE;AACb,gBAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC1B;;;aAEO,UAAC,KAAK,EAAE;AACZ,gBAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;;;WAzBgB,MAAM;;;qBAAN,MAAM","file":"logger.js","sourcesContent":["/**\n * Created by michaelsilvestre on 20/04/15\n */\n\n/**\n * 0 EMERGENCY system is unusable\n * 1 ALERT action must be taken immediately\n * 2 CRITICAL the system is in critical condition\n * 3 ERROR error condition\n * 4 WARNING warning condition\n * 5 NOTICE a normal but significant condition\n * 6 INFO a purely informational message\n * 7 DEBUG messages to debug an application\n */\n\nimport Log from \"log\"\nimport fs from \"fs\"\nimport appRootPath from \"app-root-path\"\nimport logentries from 'node-logentries';\nexport var log = null;\n\nexport let logger = {\n    error: (value) => {\n        if (log instanceof Logger) {\n            log.error = value;\n        }\n    },\n    debug: (value) => {\n        if (log instanceof Logger) {\n            log.debug = value;\n        }\n    },\n    info: (value) => {\n        if (log instanceof Logger) {\n            log.info = value;\n        }\n    }\n};\n\nexport default class Logger {\n    constructor() {\n    }\n\n    init(logLevel, logFile) {\n        if ([\"error\", \"debug\", \"info\"].indexOf(logLevel) == -1) {\n            return new Error(`The log level: ${logLevel}, not exist`);\n        }\n        //log = new Log(logLevel, fs.createWriteStream(`${appRootPath}/log/${logFile}`));\n        this._log = logentries.logger({\n            token:'9d7712a2-b05b-45a6-8505-f84424153b79'\n        });\n        log = this;\n    }\n\n    set error(value) {\n        this._log.error(value);\n    }\n\n    set debug(value) {\n        this._log.debug(value);\n    }\n\n    set info(value) {\n        this._log.info(value);\n    }\n}"]}