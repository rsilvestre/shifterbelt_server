{
  "version": 3,
  "sources": [
    "/Users/michaelsilvestre/git/shifterbelt/beta/lib/model-manager.es6"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;QAuCgB,KAAK,GAAL,KAAK;;;;;sBAnCE,kBAAkB;;AAEzC,IAAI,aAAa,GAAG,EAAE,CAAC;;AAEhB,IAAI,YAAY,GAAG;AACtB,SAAK,EAAE,eAAC,IAAI,EAAwB;YAAtB,MAAK,gCAAG,SAAS;;AAC3B,YAAI,CAAC,MAAK,EAAE;AACR,gBAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACrC,uBAAO,IAAI,KAAK,iBAAe,IAAI,iBAAc,CAAC;aACrD;AACD,mBAAO,aAAa,CAAC,IAAI,CAAC,CAAC;SAC9B;AACD,YAAI,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE;AACjE,mBAAO,IAAI,KAAK,iBAAe,IAAI,uBAAoB,CAAC;SAC3D;AACD,eAAO,YAAY,CAAC,IAAI,CAAC,CAAC;KAC7B;AACD,UAAM,EAAE,gBAAC,IAAI,EAAE,OAAM,EAAK;AACtB,YAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACrC,mBAAO,IAAI,KAAK,iBAAe,IAAI,iBAAc,CAAC;SACrD;AACD,YAAI,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACpC,mBAAO,IAAI,KAAK,iBAAe,IAAI,aAAU,CAAC;SACjD;AACD,eAAO,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,YAAY,CAAC,OAAM,CAAC,CAAC;KACzD;AACD,eAAW,EAAE,qBAAC,IAAI,EAAc;;;0CAAT,IAAI;AAAJ,gBAAI;;;AACvB,YAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACrC,oBA5BH,MAAM,CA4BI,KAAK,iBAAe,IAAI,iBAAc,CAAC;AAC9C,mBAAO,IAAI,KAAK,iBAAe,IAAI,iBAAc,CAAC;SACrD;AACD,eAAO,uBAAA,aAAa,CAAC,IAAI,CAAC,EAAC,WAAW,MAAA,sBAAI,IAAI,CAAC,CAAC;KACnD;CACJ,CAAC;;QA7BS,YAAY,GAAZ,YAAY;;AA+BhB,SAAS,KAAK,CAAC,IAAI,EAAqB;QAAnB,KAAK,gCAAG,SAAS;;AACzC,QAAI,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AACtC,WAAO,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;CAC1C;;IAGK,YAAY;AACH,aADT,YAAY,CACF,MAAM,EAAE;8BADlB,YAAY;;AAEV,YAAI,CAAC,OAAO,GAAG,MAAM,CAAC;KACzB;;iBAHC,YAAY;;eAKH,uBAAU;+CAAN,IAAI;AAAJ,oBAAI;;;AACf,mBAAO,IAAI,CAAC,SAAS,oBAAO,IAAI,CAAC,MAAM,gBAAI,IAAI,KAAC,CAAC;SACpD;;;aAEW,YAAG;AACX,mBAAO,IAAI,CAAC,SAAS,CAAC;SACzB;;;aAEQ,UAAC,KAAK,EAAE;AACb,gBAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;aAEQ,YAAG;AACR,mBAAO,IAAI,CAAC,MAAM,CAAC;SACtB;;;aAES,UAAC,KAAK,EAAE;AACd,gBAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACxB;aAES,YAAG;AACT,mBAAO,IAAI,CAAC,OAAO,CAAC;SACvB;;;WA3BC,YAAY",
  "file": "model-manager.js",
  "sourcesContent": [
    "/**\n * Created by michaelsilvestre on 22/04/15\n */\n\nimport { logger } from \"../lib/logger.js\"\n\nlet modelManagers = {};\n\nexport let modelManager = {\n    model: (name, model = undefined) => {\n        if (!model) {\n            if (!modelManagers.hasOwnProperty(name)) {\n                return new Error(`The model: ${name}, not exist`);\n            }\n            return modelManagers[name];\n        }\n        if (modelManagers.hasOwnProperty(name) && modelManagers[name].model) {\n            return new Error(`The model: ${name}, contain a model`);\n        }\n        return modelManager[name];\n    },\n    schema: (name, schema) => {\n        if (!modelManagers.hasOwnProperty(name)) {\n            return new Error(`The model: ${name}, not exist`);\n        }\n        if (modelManagers.hasOwnProperty(name)) {\n            return new Error(`The model: ${name}, exist`);\n        }\n        return modelManagers[name] = new ModelManager(schema);\n    },\n    instanciate: (name, ...args) => {\n        if (!modelManagers.hasOwnProperty(name)) {\n            logger.error(`The model: ${name}, not exist`);\n            return new Error(`The model: ${name}, not exist`);\n        }\n        return modelManagers[name].instanciate(...args);\n    }\n};\n\nexport function model(name, model = undefined) {\n    let modelManager = new ModelManager();\n    return modelManager.model(name, model);\n}\n\n\nclass ModelManager {\n    constructor(schema) {\n        this._schema = schema;\n    }\n\n    instanciate(...args) {\n        return this._instance = new this._model(...args);\n    }\n\n    get instance() {\n        return this._instance;\n    }\n\n    set model(value) {\n        this._model = value;\n    }\n\n    get model() {\n        return this._model;\n    }\n\n    set schema(value) {\n        this._schema = value;\n    }\n\n    get schema() {\n        return this._schema;\n    }\n}"
  ]
}