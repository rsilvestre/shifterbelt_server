{"version":3,"sources":["model-manager.es6"],"names":[],"mappings":";;;;;;;;;;;;;QAuCgB,KAAK,GAAL,KAAK;;;;2BAnCE,kBAAkB;;AAEzC,IAAI,aAAa,GAAG,EAAE,CAAC;;AAEhB,IAAI,YAAY,GAAG;AACxB,OAAK,EAAE,eAAC,IAAI,EAAwB;QAAtB,MAAK,gCAAG,SAAS;;AAC7B,QAAI,CAAC,MAAK,EAAE;AACV,UAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACvC,eAAO,IAAI,KAAK,iBAAe,IAAI,iBAAc,CAAC;OACnD;AACD,aAAO,aAAa,CAAC,IAAI,CAAC,CAAC;KAC5B;AACD,QAAI,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE;AACnE,aAAO,IAAI,KAAK,iBAAe,IAAI,uBAAoB,CAAC;KACzD;AACD,WAAO,YAAY,CAAC,IAAI,CAAC,CAAC;GAC3B;AACD,QAAM,EAAE,gBAAC,IAAI,EAAE,OAAM,EAAK;AACxB,QAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACvC,aAAO,IAAI,KAAK,iBAAe,IAAI,iBAAc,CAAC;KACnD;AACD,QAAI,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACtC,aAAO,IAAI,KAAK,iBAAe,IAAI,aAAU,CAAC;KAC/C;AACD,WAAO,aAAa,CAAC,IAAI,CAAC,GAAG,IAAI,YAAY,CAAC,OAAM,CAAC,CAAC;GACvD;AACD,aAAW,EAAE,qBAAC,IAAI,EAAc;;;sCAAT,IAAI;AAAJ,UAAI;;;AACzB,QAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;AACvC,mBA5BG,MAAM,CA4BF,KAAK,iBAAe,IAAI,iBAAc,CAAC;AAC9C,aAAO,IAAI,KAAK,iBAAe,IAAI,iBAAc,CAAC;KACnD;AACD,WAAO,uBAAA,aAAa,CAAC,IAAI,CAAC,EAAC,WAAW,MAAA,sBAAI,IAAI,CAAC,CAAC;GACjD;CACF,CAAC;;QA7BS,YAAY,GAAZ,YAAY;;AA+BhB,SAAS,KAAK,CAAC,IAAI,EAAqB;MAAnB,KAAK,gCAAG,SAAS;;AAC3C,MAAI,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AACtC,SAAO,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;CACxC;;IAGK,YAAY;AACL,WADP,YAAY,CACJ,MAAM,EAAE;0BADhB,YAAY;;AAEd,QAAI,CAAC,OAAO,GAAG,MAAM,CAAC;GACvB;;eAHG,YAAY;;WAKL,uBAAU;yCAAN,IAAI;AAAJ,YAAI;;;AACjB,aAAO,IAAI,CAAC,SAAS,oBAAO,IAAI,CAAC,MAAM,gBAAI,IAAI,KAAC,CAAC;KAClD;;;SAEW,YAAG;AACb,aAAO,IAAI,CAAC,SAAS,CAAC;KACvB;;;SAEQ,UAAC,KAAK,EAAE;AACf,UAAI,CAAC,MAAM,GAAG,KAAK,CAAC;KACrB;SAEQ,YAAG;AACV,aAAO,IAAI,CAAC,MAAM,CAAC;KACpB;;;SAES,UAAC,KAAK,EAAE;AAChB,UAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACtB;SAES,YAAG;AACX,aAAO,IAAI,CAAC,OAAO,CAAC;KACrB;;;SA3BG,YAAY","file":"model-manager.js","sourcesContent":["/**\n * Created by michaelsilvestre on 22/04/15\n */\n\nimport { logger } from \"../lib/logger.js\"\n\nlet modelManagers = {};\n\nexport let modelManager = {\n  model: (name, model = undefined) => {\n    if (!model) {\n      if (!modelManagers.hasOwnProperty(name)) {\n        return new Error(`The model: ${name}, not exist`);\n      }\n      return modelManagers[name];\n    }\n    if (modelManagers.hasOwnProperty(name) && modelManagers[name].model) {\n      return new Error(`The model: ${name}, contain a model`);\n    }\n    return modelManager[name];\n  },\n  schema: (name, schema) => {\n    if (!modelManagers.hasOwnProperty(name)) {\n      return new Error(`The model: ${name}, not exist`);\n    }\n    if (modelManagers.hasOwnProperty(name)) {\n      return new Error(`The model: ${name}, exist`);\n    }\n    return modelManagers[name] = new ModelManager(schema);\n  },\n  instanciate: (name, ...args) => {\n    if (!modelManagers.hasOwnProperty(name)) {\n      logger.error(`The model: ${name}, not exist`);\n      return new Error(`The model: ${name}, not exist`);\n    }\n    return modelManagers[name].instanciate(...args);\n  }\n};\n\nexport function model(name, model = undefined) {\n  let modelManager = new ModelManager();\n  return modelManager.model(name, model);\n}\n\n\nclass ModelManager {\n  constructor(schema) {\n    this._schema = schema;\n  }\n\n  instanciate(...args) {\n    return this._instance = new this._model(...args);\n  }\n\n  get instance() {\n    return this._instance;\n  }\n\n  set model(value) {\n    this._model = value;\n  }\n\n  get model() {\n    return this._model;\n  }\n\n  set schema(value) {\n    this._schema = value;\n  }\n\n  get schema() {\n    return this._schema;\n  }\n}"]}