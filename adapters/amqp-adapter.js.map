{
  "version": 3,
  "sources": [
    "/Users/michaelsilvestre/git/shifterbelt/beta/adapters/amqp-adapter.es6"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;oBAIiB,SAAS;;;;oBACT,MAAM;;;;sBACC,uBAAuB;;IAAnC,MAAM;;2BACK,iBAAiB;;;;IAEnB,WAAW;AACnB,WADQ,WAAW,CAClB,QAAQ,EAAE;0BADH,WAAW;;AAE5B,+BAFiB,WAAW,6CAEtB,OAAO,EAAE;;AAEf,QAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GACrB;;YALkB,WAAW;;eAAX,WAAW;;WAOzB,eAAC,QAAQ,EAAE;;;AACd,UAAI,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;;AAEpD,UAAI,CAAC,WAAW,GAAG,kBAAK,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACrD,UAAI,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,YAAM;AACjC,eAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;AAC1C,gBAAQ,QAAM,CAAC;OAChB,CAAC,CAAC;KACJ;;;WAEG,cAAC,QAAQ,EAAE;;;AACb,UAAI,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;;AAEpD,wBAAK,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;AAC1C,eAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;AACxD,eAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,YAAM;AAC3B,cAAI,CAAC,KAAK,EAAE,CAAC;SACd,CAAC,CAAC;AACH,eAAO,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,UAAC,EAAE,EAAK;AACvC,cAAI,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;;AAEnE,YAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAM;AACjB,mBAAO,EAAE,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;WAChD,CAAC,CAAC;;AAEH,YAAE,GAAG,EAAE,CAAC,IAAI,CAAC,UAAC,GAAG,EAAK;AACpB,mBAAO,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAM;AACtD,qBAAO,GAAG,CAAC,KAAK,CAAC;aAClB,CAAC,CAAC;WACJ,CAAC,CAAC;;AAEH,YAAE,GAAG,EAAE,CAAC,IAAI,CAAC,UAAC,KAAK,EAAK;AACtB,mBAAO,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;WACvD,CAAC,CAAC;;AAEH,iBAAO,EAAE,CAAC,IAAI,CAAC,YAAM;AACnB,mBAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AACxC,8BAAK,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI,EAAK;AAC1C,qBAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;AACxD,qBAAO,kBAAK,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,UAAC,EAAE,EAAK;AAC5C,wBAAQ,QAAM,CAAC;AACf,oBAAI,EAAE,GAAG,QAAQ,CAAC;AAClB,oBAAI,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;;AAE7D,oBAAI,OAAO,GAAG,aAAa,CAAC;;AAE5B,uBAAO,EAAE,CAAC,IAAI,CAAC,YAAM;AACnB,oBAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;AACxC,yBAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;AACvC,yBAAO,EAAE,CAAC,KAAK,EAAE,CAAC;iBACnB,CAAC,CAAC;eACJ,CAAC,CAAC,CAAC,MAAM,CAAC,YAAM;AACf,oBAAI,CAAC,KAAK,EAAE,CAAC;eACd,CAAC,CAAC;aACJ,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;WAC7B,CAAC,CAAC;;AAEH,mBAAS,UAAU,CAAC,GAAG,EAAE;AACvB,mBAAO,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;WAClD;SACF,CAAC,CAAC;OACJ,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;KAE7B;;;SAEa,YAAG;AACf,aAAO,IAAI,CAAC,WAAW,CAAC;KACzB;;;SA1EkB,WAAW;;;qBAAX,WAAW",
  "file": "amqp-adapter.js",
  "sourcesContent": [
    "/**\n * Created by michaelsilvestre on 20/04/15\n */\n\nimport amqp from \"amqplib\"\nimport when from \"when\"\nimport * as config from \"../config/adapters.js\"\nimport AbsAdapter from \"./absAdapter.js\"\n\nexport default class AmqpAdapter extends AbsAdapter {\n  constructor(callback) {\n    super(\"queue\");\n\n    this.init(callback);\n  }\n\n  init2(callback) {\n    let amqpConfig = config.adapters.getConfig(\"queue\");\n\n    this._connection = amqp.createConnection(amqpConfig);\n    this._connection.on('ready', () => {\n      console.log('amqp successfull connected');\n      callback(this);\n    });\n  }\n\n  init(callback) {\n    let amqpConfig = config.adapters.getConfig(\"queue\");\n\n    amqp.connect(amqpConfig.url).then((conn) => {\n      console.log(\"amqb sub connected successfull connected\");\n      process.once('SIGINT', () => {\n        conn.close();\n      });\n      return conn.createChannel().then((ch) => {\n        let ok = ch.assertExchange('pubsub', 'fanout', { durable: false });\n\n        ok = ok.then(() => {\n          return ch.assertQueue('', { exclusive: true });\n        });\n\n        ok = ok.then((qok) => {\n          return ch.bindQueue(qok.queue, 'pubsub', '').then(() => {\n            return qok.queue;\n          });\n        });\n\n        ok = ok.then((queue) => {\n          return ch.consume(queue, logMessage, { noAck: true });\n        });\n\n        return ok.then(() => {\n          console.log(' [*] Waiting for message');\n          amqp.connect(amqpConfig.url).then((conn) => {\n            console.log(\"amqb pub connected successfull connected\");\n            return when(conn.createChannel().then((ch) => {\n              callback(this);\n              let ex = 'pubsub';\n              let ok = ch.assertExchange(ex, 'fanout', { durable: false });\n\n              let message = 'Hello World';\n\n              return ok.then(() => {\n                ch.publish(ex, '', new Buffer(message));\n                console.log(\" [x] Sent '%s'\", message);\n                return ch.close();\n              });\n            })).ensure(() => {\n              conn.close();\n            });\n          }).then(null, console.warn);\n        });\n\n        function logMessage(msg) {\n          console.log(\" [x] '%s'\", msg.content.toString());\n        }\n      });\n    }).then(null, console.warn);\n\n  }\n\n  get connection() {\n    return this._connection;\n  }\n}"
  ]
}