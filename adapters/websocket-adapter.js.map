{
  "version": 3,
  "sources": [
    "/Users/michaelsilvestre/git/shifterbelt/beta/adapters/websocket-adapter.es6"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;wBAIqB,WAAW;;;;2BACR,iBAAiB;;;;qBACvB,OAAO;;;;sBACD,uBAAuB;;IAAnC,MAAM;;2BACK,iBAAiB;;;;uBAC1B,YAAY;;;;IAEL,gBAAgB;AACxB,WADQ,gBAAgB,CACvB,QAAQ,EAAE;0BADH,gBAAgB;;AAEjC,+BAFiB,gBAAgB,6CAE3B,WAAW,EAAE;;AAEnB,QAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;GACrB;;YALkB,gBAAgB;;eAAhB,gBAAgB;;WAO/B,cAAC,QAAQ,EAAE;AACb,UAAI,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;;;;;;;;AAQ7D,UAAI,CAAC,GAAG,GAAG,sBAAS,eAAe,CAAC,IAAI,CAAC,CAAC;AAC1C,0BAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,UAAC,GAAG,EAAK;AAC7B,WAAG,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,MAAM,EAAK;AAC/B,cAAI,MAAM,CAAC,IAAI,EAAE;AACf,mBAAO,CAAC,GAAG,4BAA0B,GAAG,CAAC,IAAI,CAAG,CAAC;AACjD,mBAAO,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;WACjC;SACF,CAAC,CAAC;OACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;AACnD,aAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;AAC/C,cAAQ,CAAC,IAAI,CAAC,CAAC;KAChB;;;SAEK,YAAG;AACP,aAAO,IAAI,CAAC,GAAG,CAAC;KACjB;;;SAEM,YAAG;AACR,aAAO,IAAI,CAAC,IAAI,CAAC;KAClB;;;WAES,oBAAC,QAAQ,EAAE;AACnB,UAAI,CAAC,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;KACtC;;;SAxCkB,gBAAgB;;;qBAAhB,gBAAgB",
  "file": "websocket-adapter.js",
  "sourcesContent": [
    "/**\n * Created by michaelsilvestre on 22/04/15\n */\n\nimport socketIo from \"socket.io\"\nimport socketRedis from \"socket.io-redis\"\nimport redis from \"redis\"\nimport * as config from \"../config/adapters.js\"\nimport AbsAdapter from \"./absAdapter.js\"\nimport _ from \"underscore\"\n\nexport default class WebsocketAdapter extends AbsAdapter {\n  constructor(callback) {\n    super('websocket');\n\n    this.init(callback);\n  }\n\n  init(callback) {\n    let websocketConfig = config.adapters.getConfig(\"websocket\");\n    //let redisConfig = config.adapters.getConfig(\"memory\");\n\n    //let pub = redis.createClient(redisConfig.port, redisConfig.host, { auth_pass: redisConfig.password });\n    //let sub = redis.createClient(redisConfig.port, redisConfig.host, { detect_buffers: true, auth_pass: redisConfig.password });\n\n    //io.adapter(socketRedis({ pubClient: pub, subClient: sub }));\n\n    this._io = socketIo(websocketConfig.port);\n    _.each(this._io.nsps, (nsp) => {\n      nsp.on('connection', (socket) => {\n        if (socket.auth) {\n          console.log(`removing socket from: ${nsp.name}`);\n          delete nsp.connected[socket.id];\n        }\n      });\n    });\n    this._nsp = this._io.of(websocketConfig.namespace);\n    console.log('socket.io successfull connected');\n    callback(this);\n  }\n\n  get io() {\n    return this._io;\n  }\n\n  get nsp() {\n    return this._nsp;\n  }\n\n  connection(callback) {\n    this._nsp.on(\"connection\", callback);\n  }\n}\n"
  ]
}