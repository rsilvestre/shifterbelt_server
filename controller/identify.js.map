{
  "version": 3,
  "sources": [
    "/Users/michaelsilvestre/git/shifterbelt/beta/controller/identify.es6"
  ],
  "names": [],
  "mappings": "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",
  "file": "identify.js",
  "sourcesContent": [
    "/**\n * Created by michaelsilvestre on 25/04/15\n */\n\nimport { adapters } from \"../adapters/absAdapter.js\"\n\nexport let identityInit = () => {\n  let websocketAdapter = adapters.getAdapter(\"websocket\");\n  websocketAdapter.nsp.use((socket, next) => {\n    let handshake = socket.handshake;\n    if (!handshake.hasOwnProperty(\"query\") && !handshake.query.hasOwnProperty(\"applicationId\")) {\n      next(new Error(\"The query don't contain applicationId\"));\n    }\n    if (!handshake.hasOwnProperty(\"address\")) {\n      next(new Error(\"The query don't contain ipAddress\"));\n    }\n\n    let identify = new Identify(handshake.query.applicationId, handshake.address);\n    identify.token = (handshake.query.hasOwnProperty(\"token\")) ? handshake.query.token : \"\";\n    identify.checkIdentity((err, result) => {\n      if (err) throw err;\n      if (result instanceof Error) {\n        next(result.message);\n      }\n      next();\n    });\n  });\n};\n\nclass Identify {\n  constructor(applicationId, ipAddress) {\n    this._applicationId = applicationId;\n    this._ipAddress = ipAddress;\n    this._checked = false;\n  }\n\n  checkIdentity(callback) {\n    var redisClient = adapters.getAdapter(\"memory\").client;\n    let hash = `${this._applicationId}${this._ipAddress.replace(/\\./, '')}`;\n    let tryIdentify = (applicationId, cb) => {\n      cb(null, true);\n    };\n    redisClient.hgetall(hash, (err, obj) => {\n      if (err) return callback(err, null);\n\n      if (obj && obj.hasOwnProperty(\"not_allow\")) {\n        if (parseInt(((new Date()).getTime() - obj.not_allow) / 1000) < 600) {\n          return callback(new Error(`The device is not allowed to connect on the system for the moment.`), null);\n        }\n        redisClient.hdel(hash, \"not_allow\", (err, result) => {\n          if (err) return callback(err, null);\n          if (!result) {\n            return callback(new Error(`Cannot remove key: not_allow, from redis`), null);\n          }\n          return tryIdentify(this._applicationId, callback);\n        });\n      }\n\n\n      if (obj && (obj.hasOwnProperty(\"token\") && this._token.length > 0 && obj.token === this._token && obj.hasOwnProperty('allow'))) {\n        if (parseInt(((new Date()).getTime() - obj.allow) / 1000) < 600) {\n          return redisClient.hmset(hash, { allow: (new Date()).getTime() + 600 }, (err, result) => {\n            if (err) return callback(err, null);\n            if (!result) {\n              return callback(new Error(`Impossible to increase the allowed time in redis`), null);\n            }\n            this._checked = true;\n            return callback(null, true);\n          });\n        }\n        return tryIdentify(this._applicationId, callback);\n      }\n\n      return redisClient.hmset(hash, { allow: (new Date()).getTime() + 600 }, (err, result) => {\n        if (err) return callback(err, null);\n        if (!result) {\n          return callback(new Error(`Impossible to increase the allowed time in redis`), null);\n        }\n        this._checked = true;\n        return callback(null, true);\n      });\n    });\n\n  }\n\n  set token(value) {\n    this._token = value;\n  }\n\n  get checked() {\n    return this._checked;\n  }\n}\n"
  ]
}