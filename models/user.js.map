{"version":3,"sources":["user.es6"],"names":[],"mappings":";;;;;;;;;;;;wBAIqB,UAAU;;;;AAE/B,IAAI,MAAM,GAAG,sBAAS,MAAM,CAAC;;AAE7B,IAAI,aAAa,GAAG,SAAhB,aAAa,CAAY,KAAK,EAAE;AAClC,MAAI,EAAE,GAAG,+CAA+C,CAAC;AACzD,SAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;CACtB,CAAC;;AAEF,IAAI,UAAU,GAAG,sBAAS,MAAM,CAAC;AAC/B,OAAK,EAAE;AACL,QAAI,EAAE,MAAM;AACZ,QAAI,EAAE,IAAI;AACV,UAAM,EAAE,IAAI;AACZ,YAAQ,EAAE,2BAA2B;AACrC,YAAQ,EAAE,CAAC,aAAa,EAAE,mCAAmC,CAAC;AAC9D,SAAK,EAAE,CAAC,+CAA+C,EAAE,mCAAmC,CAAC;GAC9F;AACD,MAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAS,EAAE,EAAE;AACnC,UAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAS,EAAE,EAAE;AACvC,UAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAS,EAAE,EAAE;AACvC,YAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAS,EAAE,EAAE,QAAM,CAAC,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE;AAC5G,iBAAe,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAS,EAAE,EAAE;AAC9C,MAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAS,EAAE,EAAE;AACnC,WAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,WAAS,EAAE,EAAE;AACxC,UAAQ,EAAE,EAAE;AACZ,SAAO,EAAE,EAAE;AACX,QAAM,EAAE,EAAE;AACV,QAAM,EAAE,EAAE;AACV,UAAQ,EAAE,EAAE;AACZ,cAAY,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,sBAAS,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,EAAE,CAAC;AACzF,WAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;AAC3B,UAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;AAC1B,aAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;AAC7B,WAAS,EAAE,CAAC;AACV,eAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;AAC7B,UAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;AACxB,UAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;AACxB,QAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;AACtB,YAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;AAC1B,WAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;AACzB,aAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,WAAS,IAAI,CAAC,GAAG,EAAE;GAC7C,CAAC;AACF,QAAM,EAAE;AACN,YAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE;GACnD;AACD,WAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,WAAS,IAAI,CAAC,GAAG,EAAE;CAC7C,CAAC,CAAC;;AAEH,UAAU,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;;AAExB,IAAI,IAAI,GAAG,sBAAS,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAA1C,IAAI,GAAJ,IAAI","file":"user.js","sourcesContent":["/**\n * Created by michaelsilvestre on 24/04/15\n */\n\nimport mongoose from \"mongoose\";\n\nlet Schema = mongoose.Schema;\n\nlet validateEmail = function(email) {\n  var re = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  return re.test(email)\n};\n\nlet userSchema = mongoose.Schema({\n  email: {\n    type: String,\n    trim: true,\n    unique: true,\n    required: 'Email address is required',\n    validate: [validateEmail, 'Please fill a valid email address'],\n    match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please fill a valid email address']\n  },\n  name: { type: String, default: '' },\n  username: { type: String, default: '' },\n  provider: { type: String, default: '' },\n  tariffPlan: { type: String, default: '', enum: ['', 'plan1', 'plan2', 'plan3', 'plan4', 'plan5', 'custom'] },\n  hashed_password: { type: String, default: '' },\n  salt: { type: String, default: '' },\n  authToken: { type: String, default: '' },\n  facebook: {},\n  twitter: {},\n  github: {},\n  google: {},\n  linkedin: {},\n  applications: [{ applicationId: { type: mongoose.Schema.ObjectId, ref: \"Application\" } }],\n  firstname: { type: String },\n  lastname: { type: String },\n  phonenumber: { type: String },\n  addresses: [{\n    typeAddress: { type: String },\n    street: { type: String },\n    number: { type: String },\n    town: { type: String },\n    postcode: { type: String },\n    country: { type: String },\n    createdAt: { type: Date, default: Date.now }\n  }],\n  tariff: {\n    tariffId: { type: Schema.ObjectId, ref: 'Tariff' }\n  },\n  createdAt: { type: Date, default: Date.now }\n});\n\nuserSchema.index({ email: 1 });\n\nexport let User = mongoose.model('User', userSchema);\n\n"]}