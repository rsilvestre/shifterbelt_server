{
  "version": 3,
  "sources": [
    "/Users/michaelsilvestre/git/shifterbelt/beta/models/device.es6"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;wBAIqB,UAAU;;;;AAE/B,IAAI,YAAY,GAAG,sBAAS,MAAM,CAAC;AAC/B,cAAU,EAAE;AACR,YAAI,EAAE,MAAM;AACZ,gBAAQ,EAAE,wBAAwB;AAClC,cAAM,EAAE,IAAI;AACZ,YAAI,EAAE,IAAI;AACV,gBAAQ,EAAE,CAAC,UAAC,KAAK,EAAK;AAClB,mBAAO,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACrC,EAAE,qBAAqB,CAAC;AACzB,aAAK,EAAE,CAAC,cAAc,EAAE,iCAAiC,CAAC;KAC7D;AACD,gBAAY,EAAE,CAAC;AACX,qBAAa,EAAE,EAAE,IAAI,EAAE,sBAAS,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC3F,cAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE;AACzC,YAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,EAAE;KAC/E,CAAC;AACF,aAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,WAAS,IAAI,CAAC,GAAG,EAAE;CAC/C,CAAC,CAAC;;AAEH,YAAY,CAAC,KAAK,CAAC,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;;AAE/B,IAAI,MAAM,GAAG,sBAAS,KAAK,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;;QAAhD,MAAM,GAAN,MAAM;AAEjB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC;;AAE5C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,UAAC,KAAK,EAAK;AACnD,SAAK,CAAC,OAAO,CAAC,UAAC,WAAW,EAAK;AAC3B,YAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;AAChD,mBAAO,KAAK,CAAC;SAChB;KACJ,CAAC,CAAC;AACH,WAAO,IAAI,CAAC;CACf,EAAE,0BAA0B,CAAC,CAAC",
  "file": "device.js",
  "sourcesContent": [
    "/**\n * Created by michaelsilvestre on 24/04/15\n */\n\nimport mongoose from \"mongoose\";\n\nlet deviceSchema = mongoose.Schema({\n    macAddress: {\n        type: String,\n        required: 'macAddress is required',\n        unique: true,\n        trim: true,\n        validate: [(value) => {\n            return /[a-z0-9]{12}/.test(value);\n        }, \"Invalid Mac Address\"],\n        match: [/[a-z0-9]{12}/, \"Please fill a valid Mac Address\"]\n    },\n    applications: [{\n        applicationId: { type: mongoose.Schema.Types.ObjectId, ref: 'Application', required: true },\n        active: { type: Boolean, required: true },\n        role: { type: String, required: true, enum: [\"master\", \"manager\", \"slave\"] }\n    }],\n    createdAt: { type: Date, default: Date.now }\n});\n\ndeviceSchema.index({ macAddress: 1 });\n\nexport let Device = mongoose.model('Device', deviceSchema);\n\nDevice.schema.path('macAddress').validate();\n\nDevice.schema.path('applications').validate((value) => {\n    value.forEach((application) => {\n        if (!/master|manager|slave/.test(application.role)) {\n            return false;\n        }\n    });\n    return true;\n}, \"Invalid application role\");"
  ]
}